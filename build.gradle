plugins {
    id 'java-gradle-plugin'
    id 'groovy-gradle-plugin'
    id 'java'
    id 'groovy'
    id 'maven-publish'
    id "com.gradle.plugin-publish" version "1.0.0-rc-3"
}

subprojects {

    apply plugin: 'java'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    jar {
        classifier null
        archiveName "${project.name}-${project.version}.jar"
    }
    sourcesJar {
        classifier null
        archiveName "${project.name}-${project.version}-sources.jar"
    }
    configurations {
        instrumentedJars {
            canBeConsumed = true
            canBeResolved = false
        }
    }
    artifacts {
        instrumentedJars(jar)
        instrumentedJars(sourcesJar)
    }

    repositories {
        mavenCentral()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }

        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        maven {
            name 'Quilt (Release)'
            url 'https://maven.quiltmc.org/repository/release/'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    dependencies {
        implementation 'org.jetbrains:annotations:23.0.0'
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'
}

repositories {
    mavenCentral()
    maven { url = 'https://maven.minecraftforge.net' }
    maven { url = 'https://maven.parchmentmc.org' }
    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
}

configurations {
    bundledJars {
        canBeConsumed = false
        canBeResolved = true
    }
    bundle
    implementation.extendsFrom(bundle)

    forgegradle
    compileOnly.extendsFrom forgegradle
}

dependencies {
    implementation 'org.ow2.asm:asm:9.3'
    implementation 'org.ow2.asm:asm-tree:9.3'
    compileOnly project(":Api")
    bundledJars(project(path: ":Common", configuration: "instrumentedJars")) { transitive false }
    bundledJars(project(path: ":Fabric", configuration: "instrumentedJars")) { transitive false }
    bundledJars(project(path: ":Forge", configuration: "instrumentedJars")) { transitive false }
    bundledJars(project(path: ":Quilt", configuration: "instrumentedJars")) { transitive false }

    // FG stuff
    forgegradle 'net.minecraftforge.gradle:ForgeGradle:5.1.+'
    forgegradle 'net.minecraftforge:artifactural:3.0.8'
    forgegradle 'net.minecraftforge:srgutils:0.4.3'
    forgegradle 'com.google.guava:guava:30.1-jre'
    forgegradle 'com.google.code.gson:gson:2.8.7'
    forgegradle 'de.siegmar:fastcsv:2.0.0'

    // Remapping
    implementation "net.fabricmc:tiny-remapper:${project.tiny_remapper_version}"
}

processResources {
    from project(":Api").sourceSets.main.resources
    from(project.zipTree(bundleStuff()))
}

def bundleStuff() {
    final var outPath = project.buildDir.toPath().resolve("projectszip").resolve("bundled.zip")
    final var task = tasks.create("${name}Bundle", Zip) {
        into("bundled") {
            from(configurations.bundledJars)
            rename(filename -> filename.toLowerCase(Locale.ROOT))
        }
        destinationDirectory.set(outPath.getParent().toFile())
        archiveName("bundled.zip")
    }
    tasks.getByName('processResources').dependsOn(task)
    return outPath
}

import java.time.OffsetDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

jar {
    final var actualDateTime = OffsetDateTime.now(ZoneOffset.UTC).withNano(0)
    final var currentDateTime = DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(actualDateTime)
    manifest.attributes([
            'Maven-Artifact'          : "${project.group}:${archivesBaseName}:${project.version}",
            'Specification-Title'     : archivesBaseName,
            'Specification-Vendor'    : 'Luke Bemish',
            'Specification-Version'   : '1',
            'Implementation-Title'    : archivesBaseName,
            'Implementation-Version'  : "${project.version}",
            'Implementation-Vendor'   : 'Luke Bemish',
            'Implementation-Timestamp': currentDateTime,
            'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
    ])
}

gradlePlugin {
    plugins {
        mcdevAnnotations {
            id = 'io.github.lukebemish.mcdevutils'
            displayName = "${mod_name}"
            description = 'A general-purpose annotation processor and gradle plugin aimed at ease of development in multi-loader Minecraft mods.'
            implementationClass = 'io.github.lukebemish.mcdevutils.impl.gradle.MCDevUtilsPlugin'
        }
    }
}

tasks.withType(JavaCompile) {
    source(project(":Api").sourceSets.main.allSource)
}

pluginBundle {
    website = 'https://github.com/lukebemish/mcdevutils'
    vcsUrl = 'https://github.com/lukebemish/mcdevutils'
    tags = ['minecraft', 'forge', 'fabric', 'multiloader']
}

publishing {
    repositories {
        mavenLocal()
    }
}