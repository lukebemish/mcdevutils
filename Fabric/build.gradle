plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'
}

loom {
    remapArchives = false
    setupRemappedVariants = false
    enableTransitiveAccessWideners = false
    runConfigs.configureEach {
        ideConfigGenerated = false
    }
    interfaceInjection {
        enableDependencyInterfaceInjection = false
    }
}

jar {
    classifier null
    getDestinationDirectory().set(new File(project.getBuildDir(),"libs"))
}

remapJar.enabled = false
remapSourcesJar.enabled = false

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    implementation project(":Common")
    implementation project(":Api")

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    testCompileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'

    testAnnotationProcessor sourceSets.main.output
}

loom {
    runs {
    }
}


processResources {
    from project(":Common").sourceSets.main.resources
    from project(":Api").sourceSets.main.resources
    inputs.property "version", project.version
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
    source(project(":Api").sourceSets.main.allSource)
}

compileTestJava {
    source(project(":Common").sourceSets.test.allSource)
    source(project(":Api").sourceSets.test.allSource)
}

processTestResources {
    from project(":Common").sourceSets.test.resources
    from project(":Api").sourceSets.test.resources
}
